/************************************************************************************************************************************
AUTOR				:	Henry Orellano
FECHA DE CREACION	:	20/06/2019
LLAMADO POR			:
DESCRIPCION			:	Inserción/actualización de notas
REVISIONES			:
-----------------------------------------------------------------------------------------------------------
VERSIÓN		FECHA MODIF.	USUARIO			DESCRIPCIÓN
-----------------------------------------------------------------------------------------------------------
1.0			02/03/2020		MALVA			SE AGREGA CONSULTA TARGET.ES_ACTIVO=1 de transaccional.evaluacion
1.1			05/06/2020		MALVA			SE AGREGA PARAMETRO @ID_PERIODO_LECTIVO_INSTITUCION Y VALIDACION -300
2.0			25/01/2020		JCHAVEZ			SE AGREGA @ID_CARRERA y @ID_UNIDAD_DIDACTICA
3.0			29/12/2021		JCHAVEZ			OPTIMIZACIÓN EN REGISTRO DE NOTAS
	
TEST:
	USP_EVALUACION_INS_NOTAS_DETALLE 308, 22615, '86000:15|', 'MALVA'
	USP_EVALUACION_INS_NOTAS_DETALLE 308, 22615, '85950:15|85977:13|85986:14|86009:13|85959:15|86011:12|85947:11|86001:13|92606:15|86003:13|', 'MALVA'
	USP_EVALUACION_INS_NOTAS_DETALLE 157,17648,1311,49307,'48063:11|48065:11|48067:11|48068:11|48064:11|48069:11|48066:11|48062:11|48070:11|','JM'
*************************************************************************************************************************************/
CREATE PROCEDURE [dbo].[USP_EVALUACION_INS_NOTAS_DETALLE]
(
	@ID_PERIODO_LECTIVO_INSTITUCION		INT, 
	@ID_PROGRAMACION_CLASE				INT,
	@ID_CARRERA							INT,
	@ID_UNIDAD_DIDACTICA				INT,
	@DETALLE_EVALUACION					NVARCHAR(max),
	@USUARIO							VARCHAR(20)
)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @RESULT INT, @ESTADO_CERRADO INT = 235, @ESTADO_ABIERTO INT = 234
	
	DECLARE @PERMITE_EDITAR BIT = (SELECT (CASE WHEN CHARINDEX('S',@DETALLE_EVALUACION) > 0 THEN 1 ELSE 0 END))
	SET @DETALLE_EVALUACION = (SELECT REPLACE(@DETALLE_EVALUACION,'S',''))

	DECLARE @TempNotas TABLE (ID_PROGRAMACION_CLASE ID, ID_CARRERA INT, ID_UNIDAD_DIDACTICA INT, ID_MATRICULA_ESTUDIANTE ID, NOTA DECIMAL_DOS, NRO INT)

	--1. GUARDAMOS DATA EN LA TABLA TEMPORAL
	INSERT INTO @TempNotas
	SELECT
	@ID_PROGRAMACION_CLASE ID_PROGRAMACION_CLASE , @ID_CARRERA ID_CARRERA , @ID_UNIDAD_DIDACTICA ID_UNIDAD_DIDACTICA,
	SUBSTRING(SplitData, 0, CHARINDEX(':', SplitData)) ID_MATRICULA_ESTUDIANTE,
	SUBSTRING(SplitData, CHARINDEX(':', SplitData)+1, LEN(SplitData)-CHARINDEX(':', SplitData)) NOTA,ROW_NUMBER() OVER(ORDER BY @ID_PROGRAMACION_CLASE)
	--INTO #TempNotas
	from dbo.UFN_SPLIT(@DETALLE_EVALUACION, '|')

	IF EXISTS (	select TOP 1 ID_EVALUACION from transaccional.evaluacion where CIERRE_PROGRAMACION =@ESTADO_CERRADO 
				and ID_PROGRAMACION_CLASE =@ID_PROGRAMACION_CLASE AND ID_CARRERA=@ID_CARRERA AND ID_UNIDAD_DIDACTICA=@ID_UNIDAD_DIDACTICA AND ES_ACTIVO=1)
				AND (@PERMITE_EDITAR=0)
					SET @RESULT = -300
	ELSE IF EXISTS (	
					SELECT temp.ID_MATRICULA_ESTUDIANTE FROM @TempNotas temp	
					LEFT JOIN 	
					(	SELECT me.ID_PERIODOS_LECTIVOS_POR_INSTITUCION, pcme.ID_PROGRAMACION_CLASE, me.ID_MATRICULA_ESTUDIANTE,
						me.ID_ESTUDIANTE_INSTITUCION 
						FROM transaccional.matricula_estudiante me
						INNER JOIN transaccional.programacion_clase_por_matricula_estudiante pcme on pcme.ID_MATRICULA_ESTUDIANTE = me.ID_MATRICULA_ESTUDIANTE		
						and me.ES_ACTIVO=1 and pcme.ES_ACTIVO=1			
					)SUBCONSULTA_MATRICULAS ON SUBCONSULTA_MATRICULAS.ID_PROGRAMACION_CLASE =temp.ID_PROGRAMACION_CLASE
					AND SUBCONSULTA_MATRICULAS.ID_MATRICULA_ESTUDIANTE =temp.ID_MATRICULA_ESTUDIANTE
					AND SUBCONSULTA_MATRICULAS.ID_PERIODOS_LECTIVOS_POR_INSTITUCION = @ID_PERIODO_LECTIVO_INSTITUCION
					AND SUBCONSULTA_MATRICULAS.ID_PROGRAMACION_CLASE =@ID_PROGRAMACION_CLASE	
					LEFT JOIN 
					(
						SELECT le.ID_LICENCIA_ESTUDIANTE, re.ID_REINGRESO_ESTUDIANTE, le.ID_ESTUDIANTE_INSTITUCION, 
						le.ID_PERIODOS_LECTIVOS_POR_INSTITUCION
						 FROM transaccional.licencia_estudiante le		 
						LEFT JOIN transaccional.reingreso_estudiante re on le.ID_LICENCIA_ESTUDIANTE = re.ID_LICENCIA_ESTUDIANTE 
						and re.ES_ACTIVO=1 
						where le.ES_ACTIVO=1 and le.ID_PERIODOS_LECTIVOS_POR_INSTITUCION = @ID_PERIODO_LECTIVO_INSTITUCION
					)SUBCONSULTA_LICENCIA ON SUBCONSULTA_LICENCIA.ID_ESTUDIANTE_INSTITUCION = SUBCONSULTA_MATRICULAS.ID_ESTUDIANTE_INSTITUCION
					WHERE SUBCONSULTA_MATRICULAS.ID_MATRICULA_ESTUDIANTE is null
				    OR (SUBCONSULTA_LICENCIA.ID_LICENCIA_ESTUDIANTE is not null and SUBCONSULTA_LICENCIA.ID_REINGRESO_ESTUDIANTE is null)
		)
		AND (@PERMITE_EDITAR=0)
			SET @RESULT = -2
	ELSE 
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION T1

		IF NOT EXISTS(SELECT TOP 1 ID_PROGRAMACION_CLASE,ID_CARRERA,ID_UNIDAD_DIDACTICA FROM @TempNotas)		
		BEGIN
			UPDATE 
				TABLA_EVALUACION_DET
			SET TABLA_EVALUACION_DET.ES_ACTIVO=0,
				USUARIO_MODIFICACION = @USUARIO,
				FECHA_MODIFICACION = GETDATE()
			FROM transaccional.evaluacion_detalle TABLA_EVALUACION_DET
			INNER JOIN transaccional.evaluacion e on TABLA_EVALUACION_DET.ID_EVALUACION = e.ID_EVALUACION
			and e.ES_ACTIVO=1 and TABLA_EVALUACION_DET.ES_ACTIVO=1
			and e.ID_PROGRAMACION_CLASE = @ID_PROGRAMACION_CLASE
			and e.ID_CARRERA = @ID_CARRERA
			and e.ID_UNIDAD_DIDACTICA = @ID_UNIDAD_DIDACTICA

			UPDATE transaccional.evaluacion 
			SET  ES_ACTIVO=0,
				USUARIO_MODIFICACION = @USUARIO,
				FECHA_MODIFICACION = GETDATE()
			where ID_PROGRAMACION_CLASE =@ID_PROGRAMACION_CLASE
			AND ID_CARRERA = @ID_CARRERA
			AND ID_UNIDAD_DIDACTICA = @ID_UNIDAD_DIDACTICA
			AND ES_ACTIVO=1
		END
		ELSE
			BEGIN
				--2. INSERTAMOS EN LA TABLA EVALUACION DE NO EXISTIR
				IF NOT EXISTS(	
					SELECT TOP 1 ID_EVALUACION FROM transaccional.evaluacion
						WHERE ID_PROGRAMACION_CLASE = @ID_PROGRAMACION_CLASE AND ID_CARRERA = @ID_CARRERA AND ID_UNIDAD_DIDACTICA = @ID_UNIDAD_DIDACTICA AND ES_ACTIVO=1
						/*SELECT B.ID_EVALUACION FROM transaccional.evaluacion_detalle A
						INNER JOIN transaccional.evaluacion B										
										ON A.ID_EVALUACION=B.ID_EVALUACION
						INNER JOIN transaccional.programacion_clase_por_matricula_estudiante C		
										ON A.ID_MATRICULA_ESTUDIANTE= C.ID_MATRICULA_ESTUDIANTE and B.ID_PROGRAMACION_CLASE=C.ID_PROGRAMACION_CLASE 
						INNER JOIN #TempNotas D 
										ON  D.ID_PROGRAMACION_CLASE=C.ID_PROGRAMACION_CLASE AND D.ID_MATRICULA_ESTUDIANTE=C.ID_MATRICULA_ESTUDIANTE
						WHERE 
							C.ES_ACTIVO=1
							AND B.ES_ACTIVO=1
							AND A.ES_ACTIVO=1*/
							)
				BEGIN
						/*MERGE INTO transaccional.evaluacion AS TARGET
						USING (					
								SELECT distinct ID_PROGRAMACION_CLASE FROM  #TempNotas					
							) AS SOURCE	ON TARGET.ID_PROGRAMACION_CLASE=SOURCE.ID_PROGRAMACION_CLASE AND TARGET.ES_ACTIVO=1
							WHEN NOT MATCHED BY TARGET
							THEN					
							INSERT (ID_PROGRAMACION_CLASE,FECHA_NOTA,ES_ACTIVO,ESTADO,USUARIO_CREACION,FECHA_CREACION)
							VALUES(
							SOURCE.ID_PROGRAMACION_CLASE,
							GETDATE(),
							1,
							1,
							@USUARIO,
							GETDATE()
						);*/
						UPDATE transaccional.evaluacion SET ES_ACTIVO=0,ESTADO=0,USUARIO_MODIFICACION=@USUARIO,FECHA_MODIFICACION=GETDATE()
						WHERE ID_PROGRAMACION_CLASE=@ID_PROGRAMACION_CLASE AND ES_ACTIVO=1 AND ID_CARRERA IS NULL AND ID_UNIDAD_DIDACTICA IS NULL

						INSERT INTO transaccional.evaluacion 
						(ID_PROGRAMACION_CLASE,ID_CARRERA,ID_UNIDAD_DIDACTICA,FECHA_NOTA,ES_ACTIVO,ESTADO,CIERRE_PROGRAMACION,USUARIO_CREACION,FECHA_CREACION)
						VALUES 
						(@ID_PROGRAMACION_CLASE,@ID_CARRERA,@ID_UNIDAD_DIDACTICA,GETDATE(),1,1,@ESTADO_ABIERTO,@USUARIO, GETDATE())
				END
				ELSE IF EXISTS(	
					SELECT TOP 1 ID_EVALUACION FROM transaccional.evaluacion
						WHERE ID_PROGRAMACION_CLASE = @ID_PROGRAMACION_CLASE AND ID_CARRERA = @ID_CARRERA AND ID_UNIDAD_DIDACTICA = @ID_UNIDAD_DIDACTICA AND ES_ACTIVO=1 AND ESTADO=1)
				BEGIN
					UPDATE transaccional.evaluacion
					SET CIERRE_PROGRAMACION= (CASE @PERMITE_EDITAR WHEN 1 THEN @ESTADO_CERRADO ELSE @ESTADO_ABIERTO END),
					USUARIO_MODIFICACION= @USUARIO,
					FECHA_MODIFICACION = GETDATE()
					WHERE ID_PROGRAMACION_CLASE = @ID_PROGRAMACION_CLASE AND ID_CARRERA = @ID_CARRERA AND ID_UNIDAD_DIDACTICA = @ID_UNIDAD_DIDACTICA AND ES_ACTIVO=1 AND ESTADO=1
				END

				--3. MERGE EN LA TABLA DETALLE DE EVALUACION	
				/*
				MERGE INTO transaccional.evaluacion_detalle AS TARGET
				USING (
						select A.ID_EVALUACION, B.ID_PROGRAMACION_CLASE,B.ID_MATRICULA_ESTUDIANTE,B.NOTA,A.ID_CARRERA,A.ID_UNIDAD_DIDACTICA
						from transaccional.evaluacion A
						inner join #TempNotas B ON A.ID_PROGRAMACION_CLASE=B.ID_PROGRAMACION_CLASE AND A.ID_CARRERA=B.ID_CARRERA AND A.ID_UNIDAD_DIDACTICA=B.ID_UNIDAD_DIDACTICA 
						WHERE A.ES_ACTIVO=1
					) AS	SOURCE ON TARGET.ID_EVALUACION= SOURCE.ID_EVALUACION 
							AND TARGET.ID_MATRICULA_ESTUDIANTE=SOURCE.ID_MATRICULA_ESTUDIANTE
							AND TARGET.ES_ACTIVO = 1
									
					WHEN MATCHED
					THEN
						UPDATE
						SET 
						NOTA= SOURCE.NOTA,
						ES_ACTIVO=1,
						ESTADO=1,
						USUARIO_MODIFICACION=@USUARIO,
						FECHA_MODIFICACION=GETDATE()
					WHEN NOT MATCHED BY TARGET
					THEN
						INSERT (ID_EVALUACION,ID_MATRICULA_ESTUDIANTE,NOTA,ES_ACTIVO,ESTADO,USUARIO_CREACION,FECHA_CREACION)
						VALUES(
							SOURCE.ID_EVALUACION,
							SOURCE.ID_MATRICULA_ESTUDIANTE,
							SOURCE.NOTA,
							1,
							1,
							@USUARIO,
							GETDATE()
							)
					WHEN NOT MATCHED BY SOURCE  AND TARGET.ID_EVALUACION=(	SELECT te.ID_EVALUACION FROM transaccional.evaluacion te WHERE te.ID_PROGRAMACION_CLASE=@ID_PROGRAMACION_CLASE AND te.ID_CARRERA=@ID_CARRERA AND te.ID_UNIDAD_DIDACTICA=@ID_UNIDAD_DIDACTICA AND te.ES_ACTIVO=1 )
					THEN
						UPDATE 
						SET NOTA=NULL,
						USUARIO_MODIFICACION=@USUARIO,
						FECHA_MODIFICACION=GETDATE();
				*/
				/*V3.0**************/
				DECLARE @I INT = 1
				DECLARE @TOTAL INT = (SELECT COUNT(1) FROM @TempNotas)
				DECLARE @ID_EVALUACION INT, @ID_MATRICULA_ESTUDIANTE INT, @NOTA DECIMAL_DOS

				SELECT @ID_EVALUACION = te.ID_EVALUACION FROM transaccional.evaluacion te WHERE te.ID_PROGRAMACION_CLASE=@ID_PROGRAMACION_CLASE AND te.ID_CARRERA=@ID_CARRERA AND te.ID_UNIDAD_DIDACTICA=@ID_UNIDAD_DIDACTICA AND te.ES_ACTIVO=1

				UPDATE transaccional.evaluacion_detalle SET
					NOTA=NULL,USUARIO_MODIFICACION=@USUARIO,FECHA_MODIFICACION=GETDATE()
				WHERE ID_EVALUACION=@ID_EVALUACION AND ES_ACTIVO=1

				WHILE (@I <= @TOTAL)
				BEGIN
					SELECT @ID_MATRICULA_ESTUDIANTE=ID_MATRICULA_ESTUDIANTE,@NOTA=NOTA FROM @TempNotas WHERE NRO = @I

					IF EXISTS (SELECT ed.ID_MATRICULA_ESTUDIANTE
								FROM transaccional.evaluacion_detalle ed
								INNER JOIN transaccional.evaluacion e ON e.ID_EVALUACION = ed.ID_EVALUACION
								WHERE e.ID_EVALUACION=@ID_EVALUACION AND ed.ID_MATRICULA_ESTUDIANTE=@ID_MATRICULA_ESTUDIANTE AND e.ES_ACTIVO=1 AND ed.ES_ACTIVO=1)
					BEGIN
						UPDATE transaccional.evaluacion_detalle SET
							NOTA=@NOTA,USUARIO_MODIFICACION=@USUARIO,FECHA_MODIFICACION=GETDATE()
						WHERE ID_EVALUACION=@ID_EVALUACION AND ID_MATRICULA_ESTUDIANTE=@ID_MATRICULA_ESTUDIANTE AND ES_ACTIVO=1
                    END
                    ELSE BEGIN
						INSERT INTO transaccional.evaluacion_detalle
						        (ID_EVALUACION,ID_MATRICULA_ESTUDIANTE,NOTA,ES_ACTIVO,ESTADO,USUARIO_CREACION,FECHA_CREACION)
						VALUES  (@ID_EVALUACION,@ID_MATRICULA_ESTUDIANTE,@NOTA,1,1,@USUARIO,GETDATE())
                    END
					SET @I = @I + 1
				END
				/*******************/
			END

		COMMIT TRANSACTION T1
			SET @RESULT = 1
		END TRY
		BEGIN CATCH
			IF @@ERROR<>0
			BEGIN
			   ROLLBACK TRANSACTION T1	   
			   /*
			   SELECT -1
			   PRINT @@ERROR
			   */	   
			   SELECT @@ERROR
			END
		END CATCH
	END

--DROP TABLE #TempNotas
SELECT @RESULT
END
GO


